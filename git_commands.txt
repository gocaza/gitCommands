add all modified, added and removed files files
*	git add -u

show all branches
*	git branch --all

switch to new branch
*	git switch <BRANCHNAME>   older command was checkout

* HEAD~n: represents the nth last commit, so HEAD~1 represents the last commit

Undo changes
*	git revert <commit>

Diff / compare
*	git diff <commit1> <commit2>
*	git diff HEAD                   compare working with history
*	git diff --staged               compare stage area with history
*	git diff                        compare between working and stage area
*	git diff --color-words          shows the part that was modified with colors
*	git diff origin/main main       compares remote main with local main
*	git diff main branch            compare main agains branch
*	git diff <commit1> <commit2> <filename> compare file fom 2 commits

Add all
*	git add .

Go backt to a previous version / undo
*	git reset --hard <commit>   revert code back to a previous commit
*	git reset --hard origin/master   revert code back to remote repository version

Push an existing repo to github
*	git remote add origin git@github.com:<name>/<repo>.git
*	git branch -M main  //specify the name of main branch
*	git push -u origin main  //-u = --set-upstream only needed the first time you push

Download and merge (fetch and merge)
*	git pull

create a branch
*	git branch <branch-name>
*	git switch -c <branch-name>   creates and switches to branch

pushing a branch for the first time
*	git push -u origin <branch-name>

merge conflicts
the current version of the code is what's between <<<<<< and =====, while the incoming version is between ==== and >>>>>>

add and commit changed files
*	git commit -am "message"

merge
*	git merge <branch_name>   merges the branch bracnh_name with the current branch we are on
*	git merge --abort   to cancel the merge

delete branch
*	git branch -D <branch-name>

deleted branch on remote and get this into local repo
*	git pull --purge

show merged branches
*	git branch --merged

logging seeing commits
*	git log --oneline
*	git log --oneline --decorate

move files
*	git mv <filename> <location>

move some part of the files that have been change to stage area, other part wont be committed on this commit, but can be committed on different commit
*	git add -p <filename>   (--patch)

Tags
*	git tag <tag name> <SHA>
*	git tag -a <tag name> <SHA or empty for latest>   annotated tag, lets you write more desription
*	git push --tags
*	git config --global push.followTags true   automatically pushes tag when you use push operations

Fix a commit / change a commit (works if commit hasn't been pushed)
*	git commit --amend

Reset
*	git reset --soft HEAD~2   remove the commit from HEAD back 2 steps but keeps the changes on stage
*	git reset --mixed HEAD~2  remove the commit from HEAD back 2 steps but keep changes on working area
*	git reset --hard HEAD~2   remove the commit from HEAD back 2 steps and deletes all files from deletes commits

reference log - which operations happen on local repo
*	git reflog

get one commit 
*	git cherry-pick <SHA> 


remove a file from stage
*	git rm --cached <filename>

for d in {1..6}; do touch "file${d}.md"; git add "file${d}.md; git commit -m "adding file ${d}"; done

* In order to host a webpage (github pages) inside github, create a repo with following name:
  <username>.github.io
  then on settings, scroll down, on github pages, you will see the name of the webpage!
